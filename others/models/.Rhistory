# Read phenotype
setwd("/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Info/phenotype/")
phenotype = as.data.frame(fread("ERF_phenotypes.txt"))
phenotype$sequencing_index2 = paste('S', as.integer(sapply(strsplit(phenotype$sequencing_index, split = 'UDI'), function(x) x[2])), sep = '')
# Remove STDs
index = phenotype[(phenotype$sequencing_run == 1) & startsWith(phenotype$ERF_ID, 'STD'),]$sequencing_index2
index = index[index %in% colnames(METH1)]
STD1 = METH1[, index]
colnames(STD1) = phenotype[(phenotype$sequencing_run == 1) & (phenotype$sequencing_index2 %in% index),]$ERF_ID
METH1 = METH1[, !(colnames(METH1) %in% index)]
index = phenotype[(phenotype$sequencing_run == 2) & startsWith(phenotype$ERF_ID, 'STD'),]$sequencing_index2
index = index[index %in% colnames(METH2)]
STD2 = METH2[, index]
colnames(STD2) = phenotype[(phenotype$sequencing_run == 2) & (phenotype$sequencing_index2 %in% index),]$ERF_ID
METH2 = METH2[, !(colnames(METH2) %in% index)]
# Recode METH with ERF_IDs
index = match(colnames(METH1), phenotype[phenotype$sequencing_run == 1,]$sequencing_index2)
sum(is.na(index)) # 0
colnames(METH1) = phenotype[phenotype$sequencing_run == 1,][index,]$ERF_ID
index = match(colnames(METH2), phenotype[phenotype$sequencing_run == 2,]$sequencing_index2)
sum(is.na(index)) # 0
colnames(METH2) = phenotype[phenotype$sequencing_run == 2,][index,]$ERF_ID
index = match(colnames(METH3), phenotype[phenotype$sequencing_run == 3,]$sequencing_index2)
sum(is.na(index)) # 0
colnames(METH3) = phenotype[phenotype$sequencing_run == 3,][index,]$ERF_ID
METH = Reduce(cbind, list(METH1, METH2, METH3))
rownames(METH) = sapply(strsplit(rownames(METH), split = "_"), function(x) x[1])
which(table(colnames(METH)) > 1) # 2931 3083 3869  417 4552  653
X = as.data.frame(t(METH))
X$smoke = phenotype[match(colnames(METH), phenotype$ERF_ID),]$smoking_3cat
X$n_cigarettes = phenotype[match(colnames(METH), phenotype$ERF_ID),]$n_cigarettes_current
X$time_since_cessation = phenotype[match(colnames(METH), phenotype$ERF_ID),]$age - phenotype[match(colnames(METH), phenotype$ERF_ID),]$age_quit_cigarettes
X$n_cigarettes[X$smoke != 'current_smoker'] = 0
X$time_since_cessation[X$smoke != 'past_smoker'] = NA
df = melt(X, id.vars = c('n_cigarettes', 'smoke', 'time_since_cessation'))
df$smoke = factor(df$smoke, c('non_smoker', 'past_smoker', 'current_smoker'))
table(is.na(df$n_cigarettes), df$smoke)
p = ggplot(data = df[!is.na(df$n_cigarettes) & !is.na(df$smoke),], aes(x = n_cigarettes, y = value, col = smoke)) + geom_point(alpha = 0.8) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + facet_wrap(~variable, ncol = 6) +
scale_color_manual(values = c('bisque1', 'gray82', 'dimgray')) + xlab("") + geom_smooth(method = 'lm', linetype = 2, col = 'red2')
pvals = sapply(1:nrow(METH), function(x) summary(lm(X[!is.na(X$n_cigarettes) & !is.na(df$smoke),x] ~ X$n_cigarettes[!is.na(X$n_cigarettes) & !is.na(df$smoke)]))$coefficients[2,'Pr(>|t|)'])
names(pvals) = colnames(X)[1:13]
p = ggplot(data = df[!is.na(df$time_since_cessation) & !is.na(df$smoke),], aes(x = time_since_cessation, y = value, col = smoke)) + geom_point(alpha = 0.8) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + facet_wrap(~variable, ncol = 6) +
scale_color_manual(values = c('gray82', 'dimgray')) + xlab("") + geom_smooth(method = 'lm', linetype = 2, col = 'red2')
pvals = sapply(1:nrow(METH), function(x) summary(lm(X[!is.na(X$time_since_cessation) & !is.na(df$smoke),x] ~ X$time_since_cessation[!is.na(X$time_since_cessation) & !is.na(df$smoke)]))$coefficients[2,'Pr(>|t|)'])
names(pvals) = colnames(X)[1:13]
length(X[!is.na(X$n_cigarettes) & !is.na(df$smoke), 1]) # 237
!is.na(X$n_cigarettes)
!is.na(X$n_cigarettes) & !is.na(df$smoke)
length(X[!is.na(X$n_cigarettes) & !is.na(X$smoke), 1]) # 237
length(X[!is.na(X$time_since_cessation) & !is.na(X$smoke), 1]) # 72
sessionInfo()
# Remove technical replicates
rep = names(which(table(colnames(METH_corrected)) > 1))
## Load libraries
library(data.table)
library(gplots)
library(ggplot2)
library(ggridges)
library(ggtern)
library(RColorBrewer)
library(scales)
library(corrplot)
library(MASS)
library(nnet)
library(caret)
library(minpack.lm)
library(ROCR)
library(HandTill2001)
library(MLmetrics)
library(effectsize)
library(UMtools)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(UMtools)
## Load functions
process_fread <- function(mat)
{
CpGs = mat$rn
mat = as.matrix(mat[,-1])
rownames(mat) = CpGs
return(mat)
}
process.names <- function(X, run)
{
Nam = colnames(X)
Nam = paste(run, sapply(strsplit(Nam, split = "_"), function(x) x[3]), sep = "")
colnames(X) = Nam
return(X)
}
inverse.model <- function(k1, k2, a, b, val)
{
f <- function(x)
{
(a*exp(-k1*x) + b*exp(-k2*x) - val)
}
uniroot(f = f, interval = c(0,1))$root
}
f1 <- function(data, lev = NULL, model = NULL)
{
confusionMatrix(data = table(data$pred, data$obs), mode = 'everything')$byClass['F1']
}
macrof1 <- function(data, lev = NULL, model = NULL)
{
c(F1 = F1_Score_macro_weighted(data$obs, data$pred))
}
####################### General #######################
breaks=seq(0, 1, 0.05)
my_palette <- colorRampPalette(c("ivory", "cyan4"))(n = length(breaks) - 1)
LEV = c("cg05575921", "cg13039251", "cg03636183", "cg12803068", "cg22132788",
"cg06126421", "cg21566642", "cg23576855", "cg15693572", "cg05951221",
"cg01940273", "cg12876356", "cg09935388")
setwd("/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Info/genome/")
cg_pos = fread("cg_position.txt")
cg_pos = cg_pos[order(cg_pos$cg),]
POS_450K = paste(cg_pos$cg, as.numeric(cg_pos$position)+2, as.numeric(cg_pos$position)+2, sep = "_") # +2 because of NN, beginning amplicon
setwd("/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Info/models/")
load(file = "Two_category_model.rda")
M2cat
load(file = "Three_category_model.rda")
M3cat
# Read METH
setwd("/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Data_Run1/3_methylation/bedGraphs/")
METH1 = process_fread(fread("2022-01-24_meth.txt", header = T))/100
setwd("/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Data_Run2/3_methylation/bedGraphs/")
METH2 = process_fread(fread("2022-01-25_meth.txt", header = T))/100
setwd("/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Data_Run3/3_methylation/bedGraphs/")
METH3 = process_fread(fread("2022-01-26_meth.txt", header = T))/100
# process names and filter for 450K pos
METH1 = process.names(METH1[POS_450K,], "")
METH2 = process.names(METH2[POS_450K,], "")
METH3 = process.names(METH3[POS_450K,], "")
# Remove failed barcodes
setwd("/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Data_Run1/0_FASTQ/")
counts = fread("counts.txt", header = F)$V1
Samp = counts[seq(1, length(counts), 2)]
counts = as.numeric(counts[seq(2, length(counts), 2)]); names(counts) = Samp
failed = Samp[log10(counts+1) < 3] # S45, S58, S73, S75
(remove = unique(sapply(strsplit(failed, split = '_'), function(x) x[2])))
METH1 = METH1[, !(colnames(METH1) %in% remove)]
#
setwd("/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Data_Run2/0_FASTQ/")
counts = fread("counts.txt", header = F)$V1
Samp = counts[seq(1, length(counts), 2)]
counts = as.numeric(counts[seq(2, length(counts), 2)]); names(counts) = Samp
failed = Samp[log10(counts+1) < 3] # S19, S51, S54, S62, S64, S78
(remove = unique(sapply(strsplit(failed, split = '_'), function(x) x[2])))
METH2 = METH2[, !(colnames(METH2) %in% remove)]
#
setwd("/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Data_Run3/0_FASTQ/")
counts = fread("counts.txt", header = F)$V1
Samp = counts[seq(1, length(counts), 2)]
counts = as.numeric(counts[seq(2, length(counts), 2)]); names(counts) = Samp
failed = Samp[log10(counts+1) < 4.6] # character(0)
(remove = unique(sapply(strsplit(failed, split = '_'), function(x) x[2])))
METH3 = METH3[, !(colnames(METH3) %in% remove)]
# Read phenotype
setwd("/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Info/phenotype/")
phenotype = as.data.frame(fread("ERF_phenotypes.txt"))
phenotype$sequencing_index2 = paste('S', as.integer(sapply(strsplit(phenotype$sequencing_index, split = 'UDI'), function(x) x[2])), sep = '')
# Remove STDs
index = phenotype[(phenotype$sequencing_run == 1) & startsWith(phenotype$ERF_ID, 'STD'),]$sequencing_index2
index = index[index %in% colnames(METH1)]
STD1 = METH1[, index]
colnames(STD1) = phenotype[(phenotype$sequencing_run == 1) & (phenotype$sequencing_index2 %in% index),]$ERF_ID
METH1 = METH1[, !(colnames(METH1) %in% index)]
index = phenotype[(phenotype$sequencing_run == 2) & startsWith(phenotype$ERF_ID, 'STD'),]$sequencing_index2
index = index[index %in% colnames(METH2)]
STD2 = METH2[, index]
colnames(STD2) = phenotype[(phenotype$sequencing_run == 2) & (phenotype$sequencing_index2 %in% index),]$ERF_ID
METH2 = METH2[, !(colnames(METH2) %in% index)]
# Recode METH with ERF_IDs
index = match(colnames(METH1), phenotype[phenotype$sequencing_run == 1,]$sequencing_index2)
sum(is.na(index)) # 0
colnames(METH1) = phenotype[phenotype$sequencing_run == 1,][index,]$ERF_ID
index = match(colnames(METH2), phenotype[phenotype$sequencing_run == 2,]$sequencing_index2)
sum(is.na(index)) # 0
colnames(METH2) = phenotype[phenotype$sequencing_run == 2,][index,]$ERF_ID
index = match(colnames(METH3), phenotype[phenotype$sequencing_run == 3,]$sequencing_index2)
sum(is.na(index)) # 0
colnames(METH3) = phenotype[phenotype$sequencing_run == 3,][index,]$ERF_ID
METH = Reduce(cbind, list(METH1, METH2, METH3))
rownames(METH) = sapply(strsplit(rownames(METH), split = "_"), function(x) x[1])
which(table(colnames(METH)) > 1) # 2931 3083 3869  417 4552  653
rownames(STD1) = sapply(strsplit(rownames(STD1), split = "_"), function(x) x[1])
rownames(STD2) = sapply(strsplit(rownames(STD2), split = "_"), function(x) x[1])
setwd('/media/ultron/2tb_disk2/0_startallover/Smoking_NFI_2/Z_Figures/')
UMtools::export_bigmat(bigmat = round(rbind(t(STD1), t(STD2)), 5), 'STDs.txt')
STD = rbind(cbind(melt(t(STD1)), std = 'run 1'), cbind(melt(t(STD2)), std = 'run 2'))
head(STD)
STD$ratio = as.numeric(sapply(strsplit(as.vector(STD$Var1), split = ' '), function(x) x[2]))
head(STD)
ggplot(data = STD, aes(x = ratio, y = value, col = Var2)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
geom_smooth(method = "loess", span = 1) +
theme_minimal() + geom_jitter() +  facet_wrap(~Var2) + ylim(-0.15,1.1) +
labs(title = "Standards") +
xlab("Expected Methylation Ratio") + ylab("Observed Methylation Ratio") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none",
plot.title = element_text(hjust = 0.5))
pooling_info = matrix(c('cg05575921', 2, 'cg06126421', 3, 'cg22132788', 3,
'cg12803068', 3, 'cg13039251', 2, 'cg01940273', 1,
'cg03636183', 1, 'cg23576855', 2, 'cg12876356', 1,
'cg15693572', 2, 'cg05951221', 3, 'cg09935388', 3, 'cg21566642', 1), ncol = 2, byrow = T)
pooling_info = as.data.frame(pooling_info)
pool1 = pooling_info$V1[pooling_info$V2 == '1']
pool2 = pooling_info$V1[pooling_info$V2 == '2']
pool3 = pooling_info$V1[pooling_info$V2 == '3']
STD$pool = NA
STD$pool[STD$Var2 %in% pool1] = 'pool_1'
STD$pool[STD$Var2 %in% pool2] = 'pool_2'
STD$pool[STD$Var2 %in% pool3] = 'pool_3'
# Parameter estimation
std_data = cbind(STD1, STD2)
x = sapply(strsplit(colnames(std_data), split = '[ ]'), function(x) as.numeric(x[2]))
max_try = 5
set.seed(1)
results = list()
for(i in 1:nrow(std_data))
{
print(i)
y = std_data[i,]
mod = tryCatch(nlsLM(formula = y ~ a*exp(-k1*x) + b*exp(-k2*x),
start = list(k1 = rnorm(1), k2 = rnorm(1), a = rnorm(1), b = rnorm(1)), control = list(maxiter = 100)), error = function(x) NA)
j = 1
while(is.na(mod)[1] & j < max_try)
{
mod = tryCatch(nlsLM(formula = y ~ a*exp(-k1*x) + b*exp(-k2*x),
start = list(k1 = rnorm(1), k2 = rnorm(1), a = rnorm(1), b = rnorm(1)), control = list(maxiter = 100)), error = function(x) NA)
j = j + 1
}
results[[i]] = mod
}
# Inverse problem
COEF = sapply(results, coef)
colnames(COEF) = rownames(std_data)
range = seq(0, 1, 0.01)
RES = sapply(1:nrow(std_data), function(y) sapply(range, function(x) tryCatch(inverse.model(COEF[1,y], COEF[2,y],
COEF[3,y], COEF[4,y], x), error = function(e) NA)))
# Visualization
m.RES = melt(RES)
m.RES$Var2 = rownames(std_data)[m.RES$Var2]
m.RES$Var1 = range[m.RES$Var1]
colnames(m.RES) = c('value', 'Var2', 'ratio')
# Visualize fit
p = ggplot(data = STD, aes(x = ratio, y = value, col = Var2)) +
geom_line(data = m.RES) +
theme_minimal() + geom_jitter(alpha = 0.5) +  facet_wrap(~Var2, drop = T) +
labs(title = "Standards") +
xlab("Expected Methylation Ratio") + ylab("Observed Methylation Ratio") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none",
plot.title = element_text(hjust = 0.5)) + scale_y_continuous(breaks = seq(0, 1, by = 0.5))
# Compute corrected data
METH_corrected = sapply(1:nrow(METH), function(y) sapply(METH[y,], function(x) tryCatch(inverse.model(COEF[1,y], COEF[2,y],
COEF[3,y], COEF[4,y], x), error = function(e) NA)))
METH_corrected = t(METH_corrected)
rownames(METH_corrected) = rownames(METH)
# Out of prediction range
sum(is.na(METH_corrected)) # 128
METH_corrected[is.na(METH_corrected)] = round(METH)[is.na(METH_corrected)]
# Visualization
df = cbind(melt(METH), melt(METH_corrected)$value)
colnames(df) = c('CpG', 'ID', 'uncorrected_meth', 'corrected_meth')
dfB = m.RES
colnames(dfB) = c('uncorrected_meth', 'CpG', 'corrected_meth')
# Remove technical replicates
rep = names(which(table(colnames(METH_corrected)) > 1))
indices = sapply(1:length(rep), function(x) which(colnames(METH) == rep[x]))
REP = METH[, c(indices[1,], indices[2,])]
REP_corrected = METH_corrected[, c(indices[1,], indices[2,])]
X = METH[,-indices[2,]]
X_corrected = METH_corrected[,-indices[2,]]
# Remove NAs in phenotype
smoke3cat = phenotype[match(colnames(X), phenotype$ERF_ID),]$smoking_3cat
X = X[, smoke3cat != '']
X_corrected = X_corrected[, smoke3cat != '']
smoke3cat = smoke3cat[smoke3cat != '']
# Extract phenotypes
smoke2cat = smoke3cat
smoke2cat[smoke2cat == ''] = NA
smoke2cat[smoke2cat %in% c('non_smoker', 'past_smoker')] = 'past_or_non_smoker'
smoke2cat = factor(smoke2cat, c('past_or_non_smoker', 'current_smoker'))
table(smoke2cat, exclude = F)
# smoke2cat
# past_or_non_smoker     current_smoker
#   142                 90
smoke3cat = factor(smoke3cat, c('non_smoker', 'past_smoker', 'current_smoker'))
table(smoke3cat, exclude = F)
# smoke3cat
# non_smoker    past_smoker current_smoker
#   71             71             90
# Build joint dataset
markers = c('cg12876356', 'cg21566642', 'cg09935388', 'cg15693572', 'cg05951221', 'cg03636183',
'cg01940273', 'cg13039251', 'cg23576855', 'cg06126421', 'cg12803068', 'cg22132788', 'cg05575921')
df = M2cat$data[,c(markers, 'Smoking')]
df$technology = 'microarray'
df$Smoking = as.factor(df$Smoking)
levels(df$Smoking) = c('past_or_non_smoker', 'current_smoker')
df2 = as.data.frame(t(X)[,markers])
df2$Smoking = smoke2cat
df2$technology = 'sequencing'
df_global = rbind(df, df2)
df_global$technology = as.factor(df_global$technology)
## mQTL
smoke = df$Smoking
smoke = factor(as.numeric(smoke == 'current_smoker'))
levels(smoke) = c('bisque1', 'dimgray'); smoke = as.character(smoke)
plot(df[,'cg05575921'], df[,'cg23576855'], xlim = c(0,1), ylim = c(0,1), col = alpha(smoke, 0.3), pch = 19)
##
set.seed(123)
seeds <- vector(mode = "list", length = 11)
for(i in 1:10) seeds[[i]] <- sample.int(1000, 1)
seeds[[11]] <- sample.int(1000, 1)
train_control <- trainControl(method="repeatedcv", number=5, repeats = 2, savePredictions = TRUE, classProbs = TRUE, summaryFunction = f1, seeds = seeds)
model <- train(Smoking ~ technology + technology:cg12876356 + technology:cg21566642 + technology:cg09935388 + technology:cg15693572 +
technology:cg05951221 + technology:cg03636183 + technology:cg01940273 + technology:cg13039251 + technology:cg23576855 +
technology:cg06126421 + technology:cg12803068 + technology:cg22132788 + technology:cg05575921,
data=df_global, trControl=train_control, method="glm", family = "binomial", metric = 'F1')
PREDICTIONS = model$pred
PREDICTIONS$technology = df_global$technology[PREDICTIONS$rowIndex]
CONF_MAT = table(PREDICTIONS$pred, PREDICTIONS$obs, PREDICTIONS$Resample, PREDICTIONS$technology)
CONF_MAT = lapply(1:length(unique(PREDICTIONS$Resample)), function(x) lapply(1:2, function(y) CONF_MAT[,,x,y]))
PERFORMANCE = sapply(1:length(unique(PREDICTIONS$Resample)), function(x) sapply(1:2, function(y) confusionMatrix(data = CONF_MAT[[x]][[y]], mode = 'everything')$byClass['F1']))
rownames(PERFORMANCE) = c('microarray', 'seq')
colnames(PERFORMANCE) = as.character(sapply(1:5, function(x) paste(x, 1:2, sep = '_')))
#                  1_1       1_2       2_1       2_2       3_1       3_2       4_1       4_2       5_1       5_2
# microarray 0.9567854 0.9581465 0.9509434 0.9574944 0.9581465 0.9548585 0.9601803 0.9554044 0.9540317 0.9527382
# seq        0.8055556 0.7719298 0.7936508 0.8000000 0.8064516 0.8354430 0.8235294 0.8307692 0.8214286 0.8000000
round(rowMeans(PERFORMANCE), 3)
# microarray   seq
# 0.956      0.809
round(rowSds(PERFORMANCE), 3)
# [1] 0.003 0.019
# Final model
summary(model$finalModel)
setwd('/home/ultron/Git/GAMBA/others/models/')
save(model$finalModel, file='Vidaki_et_al_2cat.rda')
# Final model
summary(model$finalModel)
model$finalModel
jkl = model$finalModel
jkl
setwd('/home/ultron/Git/GAMBA/others/models/')
save(jkl, file='Vidaki_et_al_2cat.rda')
M2cat_MPS = model$finalModel
save(jkl, file='Vidaki_et_al_2cat.rda')
markers = c('cg12876356', 'cg21566642', 'cg09935388', 'cg15693572', 'cg05951221', 'cg03636183',
'cg01940273', 'cg13039251', 'cg23576855', 'cg06126421', 'cg12803068', 'cg22132788', 'cg05575921')
df = M2cat$data[,c(markers, 'Smoking')]
u = log(as.numeric(M3cat$fitted.values[,2]/M3cat$fitted.values[,3]))
w = as.numeric(cbind(1, as.matrix(df[,colnames(coef(M3cat))[-1]])) %*% (coef(M3cat)[1,]-coef(M3cat)[2,]))
positions = sapply(1:length(u), function(x) which.min((u[x]-w)^2))
df = df[positions,]
df$Smoking = sapply(1:nrow(M3cat$fitted.values), function(x) which((M3cat$fitted.values+M3cat$residuals)[x,] == 1))
df$Smoking = factor(df$Smoking)
table(df$Smoking)
# 1    2     3
# 1243 1332  364
table(df$Smoking, predict(M3cat))
#     1   2   3
# 1 969 272   2
# 2 407 868  57
# 3  24  97 243
F1_Score_macro_weighted(df$Smoking, predict(M3cat)) # 0.7090622
mod = multinom(formula = Smoking ~ ., data = df)
plot(coef(mod), coef(M3cat)[,colnames(coef(mod))]); abline(0, 1, lty = 2)
df$technology = 'microarray'
levels(df$Smoking) = c('non_smoker', 'past_smoker', 'current_smoker')
df2 = as.data.frame(t(X)[,markers])
df2$Smoking = smoke3cat
df2$technology = 'sequencing'
df_global = rbind(df, df2)
df_global$technology = as.factor(df_global$technology)
set.seed(124)
seeds <- vector(mode = "list", length = 11)
for(i in 1:10) seeds[[i]] <- sample.int(1000, 3)
seeds[[11]] <- sample.int(1000, 1)
train_control <- trainControl(method="repeatedcv", number=5, repeats = 2, savePredictions = TRUE, classProbs = TRUE, summaryFunction = macrof1, seeds = seeds)
model <- train(Smoking ~ technology + technology:cg12876356 + technology:cg21566642 + technology:cg09935388 + technology:cg15693572 +
technology:cg05951221 + technology:cg03636183 + technology:cg01940273 + technology:cg13039251 + technology:cg23576855 +
technology:cg06126421 + technology:cg12803068 + technology:cg22132788 + technology:cg05575921,
data=df_global, trControl=train_control, method="multinom", metric = 'F1')
PREDICTIONS = model$pred
PREDICTIONS$technology = df_global$technology[PREDICTIONS$rowIndex]
PERFORMANCE = rbind(sapply(unique(PREDICTIONS$Resample), function(x) macrof1(PREDICTIONS[PREDICTIONS$Resample == x &
PREDICTIONS$technology == 'microarray',])),
sapply(unique(PREDICTIONS$Resample), function(x) macrof1(PREDICTIONS[PREDICTIONS$Resample == x &
PREDICTIONS$technology == 'sequencing',])))
rownames(PERFORMANCE) = c('microarray', 'seq')
colnames(PERFORMANCE) = as.character(sapply(1:5, function(x) paste(x, 1:2, sep = '_')))
#                  1_1       1_2       2_1       2_2       3_1       3_2       4_1       4_2       5_1       5_2
# microarray 0.7195563 0.6984020 0.6876356 0.6922730 0.7216709 0.6877306 0.7360022 0.7021016 0.6602734 0.7061514
# seq        0.6680097 0.5564081 0.6056434 0.6132393 0.6513932 0.6450975 0.6580164 0.6910317 0.5274814 0.4829053
round(rowMeans(PERFORMANCE), 3)
# microarray        seq
# 0.701      0.610
round(rowSds(PERFORMANCE), 3)
# [1] 0.021 0.068
# Final model
model$finalModel
M3cat_MPS = model$finalModel
M3cat_MPS
save(M3cat_MPS, file='Vidaki_et_al_3cat.rda')
# Build joint dataset
markers = c('cg12876356', 'cg21566642', 'cg09935388', 'cg15693572', 'cg05951221', 'cg03636183',
'cg01940273', 'cg13039251', 'cg23576855', 'cg06126421', 'cg12803068', 'cg22132788', 'cg05575921')
df = M2cat$data[,c(markers, 'Smoking')]
df$technology = 'microarray'
df$Smoking = as.factor(df$Smoking)
levels(df$Smoking) = c('past_or_non_smoker', 'current_smoker')
df2 = as.data.frame(t(X)[,markers])
df2$Smoking = smoke2cat
df2$technology = 'sequencing'
df_global = rbind(df, df2)
df_global$technology = as.factor(df_global$technology)
## mQTL
smoke = df$Smoking
smoke = factor(as.numeric(smoke == 'current_smoker'))
levels(smoke) = c('bisque1', 'dimgray'); smoke = as.character(smoke)
plot(df[,'cg05575921'], df[,'cg23576855'], xlim = c(0,1), ylim = c(0,1), col = alpha(smoke, 0.3), pch = 19)
##
set.seed(123)
seeds <- vector(mode = "list", length = 11)
for(i in 1:10) seeds[[i]] <- sample.int(1000, 1)
seeds[[11]] <- sample.int(1000, 1)
train_control <- trainControl(method="repeatedcv", number=5, repeats = 2, savePredictions = TRUE, classProbs = TRUE, summaryFunction = f1, seeds = seeds)
model <- train(Smoking ~ technology + technology:cg12876356 + technology:cg21566642 + technology:cg09935388 + technology:cg15693572 +
technology:cg05951221 + technology:cg03636183 + technology:cg01940273 + technology:cg13039251 + technology:cg23576855 +
technology:cg06126421 + technology:cg12803068 + technology:cg22132788 + technology:cg05575921,
data=df_global, trControl=train_control, method="glm", family = "binomial", metric = 'F1')
PREDICTIONS = model$pred
PREDICTIONS$technology = df_global$technology[PREDICTIONS$rowIndex]
CONF_MAT = table(PREDICTIONS$pred, PREDICTIONS$obs, PREDICTIONS$Resample, PREDICTIONS$technology)
CONF_MAT = lapply(1:length(unique(PREDICTIONS$Resample)), function(x) lapply(1:2, function(y) CONF_MAT[,,x,y]))
PERFORMANCE = sapply(1:length(unique(PREDICTIONS$Resample)), function(x) sapply(1:2, function(y) confusionMatrix(data = CONF_MAT[[x]][[y]], mode = 'everything')$byClass['F1']))
rownames(PERFORMANCE) = c('microarray', 'seq')
colnames(PERFORMANCE) = as.character(sapply(1:5, function(x) paste(x, 1:2, sep = '_')))
#                  1_1       1_2       2_1       2_2       3_1       3_2       4_1       4_2       5_1       5_2
# microarray 0.9567854 0.9581465 0.9509434 0.9574944 0.9581465 0.9548585 0.9601803 0.9554044 0.9540317 0.9527382
# seq        0.8055556 0.7719298 0.7936508 0.8000000 0.8064516 0.8354430 0.8235294 0.8307692 0.8214286 0.8000000
round(rowMeans(PERFORMANCE), 3)
# microarray   seq
# 0.956      0.809
round(rowSds(PERFORMANCE), 3)
# [1] 0.003 0.019
# Final model
summary(model$finalModel)
setwd('/home/ultron/Git/GAMBA/others/models/')
M2cat_MPS = model$finalModel
save(M2cat_MPS, file='Vidaki_et_al_3cat.rda')
setwd('/home/ultron/Git/GAMBA/others/models/')
M2cat_MPS = model$finalModel
save(M2cat_MPS, file='Vidaki_et_al_2cat.rda')
markers = c('cg12876356', 'cg21566642', 'cg09935388', 'cg15693572', 'cg05951221', 'cg03636183',
'cg01940273', 'cg13039251', 'cg23576855', 'cg06126421', 'cg12803068', 'cg22132788', 'cg05575921')
df = M2cat$data[,c(markers, 'Smoking')]
u = log(as.numeric(M3cat$fitted.values[,2]/M3cat$fitted.values[,3]))
w = as.numeric(cbind(1, as.matrix(df[,colnames(coef(M3cat))[-1]])) %*% (coef(M3cat)[1,]-coef(M3cat)[2,]))
positions = sapply(1:length(u), function(x) which.min((u[x]-w)^2))
df = df[positions,]
df$Smoking = sapply(1:nrow(M3cat$fitted.values), function(x) which((M3cat$fitted.values+M3cat$residuals)[x,] == 1))
df$Smoking = factor(df$Smoking)
table(df$Smoking)
# 1    2     3
# 1243 1332  364
table(df$Smoking, predict(M3cat))
#     1   2   3
# 1 969 272   2
# 2 407 868  57
# 3  24  97 243
F1_Score_macro_weighted(df$Smoking, predict(M3cat)) # 0.7090622
mod = multinom(formula = Smoking ~ ., data = df)
plot(coef(mod), coef(M3cat)[,colnames(coef(mod))]); abline(0, 1, lty = 2)
df$technology = 'microarray'
levels(df$Smoking) = c('non_smoker', 'past_smoker', 'current_smoker')
df2 = as.data.frame(t(X)[,markers])
df2$Smoking = smoke3cat
df2$technology = 'sequencing'
df_global = rbind(df, df2)
df_global$technology = as.factor(df_global$technology)
set.seed(124)
seeds <- vector(mode = "list", length = 11)
for(i in 1:10) seeds[[i]] <- sample.int(1000, 3)
seeds[[11]] <- sample.int(1000, 1)
train_control <- trainControl(method="repeatedcv", number=5, repeats = 2, savePredictions = TRUE, classProbs = TRUE, summaryFunction = macrof1, seeds = seeds)
model <- train(Smoking ~ technology + technology:cg12876356 + technology:cg21566642 + technology:cg09935388 + technology:cg15693572 +
technology:cg05951221 + technology:cg03636183 + technology:cg01940273 + technology:cg13039251 + technology:cg23576855 +
technology:cg06126421 + technology:cg12803068 + technology:cg22132788 + technology:cg05575921,
data=df_global, trControl=train_control, method="multinom", metric = 'F1')
PREDICTIONS = model$pred
PREDICTIONS$technology = df_global$technology[PREDICTIONS$rowIndex]
PERFORMANCE = rbind(sapply(unique(PREDICTIONS$Resample), function(x) macrof1(PREDICTIONS[PREDICTIONS$Resample == x &
PREDICTIONS$technology == 'microarray',])),
sapply(unique(PREDICTIONS$Resample), function(x) macrof1(PREDICTIONS[PREDICTIONS$Resample == x &
PREDICTIONS$technology == 'sequencing',])))
rownames(PERFORMANCE) = c('microarray', 'seq')
colnames(PERFORMANCE) = as.character(sapply(1:5, function(x) paste(x, 1:2, sep = '_')))
#                  1_1       1_2       2_1       2_2       3_1       3_2       4_1       4_2       5_1       5_2
# microarray 0.7195563 0.6984020 0.6876356 0.6922730 0.7216709 0.6877306 0.7360022 0.7021016 0.6602734 0.7061514
# seq        0.6680097 0.5564081 0.6056434 0.6132393 0.6513932 0.6450975 0.6580164 0.6910317 0.5274814 0.4829053
round(rowMeans(PERFORMANCE), 3)
# microarray        seq
# 0.701      0.610
round(rowSds(PERFORMANCE), 3)
# [1] 0.021 0.068
# Final model
model$finalModel
setwd('/home/ultron/Git/GAMBA/others/models/')
M3cat_MPS = model$finalModel
save(M3cat_MPS, file='Vidaki_et_al_3cat.rda')
